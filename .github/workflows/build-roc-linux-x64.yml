on:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron:  '0 9 * * *'

name: Build Linux x64 Roc CLI

jobs:
  build-roc-cli:
    name: Build the `roc` CLI
    runs-on: ubuntu-22.04
    timeout-minutes: 360
    steps:
    - uses: actions/checkout@v3

    - name: Build Docker image
      run: docker build -t docker-build-env ./.github/workflows/

    - name: get commit SHA
      run:  echo "SHA=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV

    - name: get date
      run: echo "DATE=$(date "+%Y-%m-%d")" >> $GITHUB_ENV

    - name: build file name
      env:
        DATE: ${{ env.DATE }}
        SHA: ${{ env.SHA }}
      run: echo "RELEASE_FOLDER_NAME=roc_npm_nightly-linux_x64-$DATE-$SHA" >> $GITHUB_ENV

    - name: write version to file
      run: ./ci/write_version.sh

    - name: Run build in Docker container
      run: |
        docker run --mount type=bind,source="$(pwd)",target=/app docker-build-env bash -c "\
        cd /app && \
        cargo build --locked --profile=release-with-lto --bin roc && \
        ./target/release/roc version"

    # this makes the roc binary a lot smaller
    - name: strip debug info
      run: strip ./target/release-with-lto/roc
    - name: package release
      run: ./ci/package_release.sh ${{ env.RELEASE_FOLDER_NAME }}
    - name: delete everything except the tar
      run: ls | grep -v "roc_nightly.*tar\.gz" | xargs rm -rf
    - name: extract tar for a quick test
      run: ls | grep tar | xargs tar -xf
    - name: test with rust platform
      run: cd ${{ env.RELEASE_FOLDER_NAME }} && ./roc examples/platform-switching/rocLovesRust.roc
    - name: print short commit SHA
      run: git rev-parse --short "$GITHUB_SHA"
    - name: print date
      run: date
    - name: Upload artifact Actually uploading to github releases has to be done manually
      uses: actions/upload-artifact@v3
      with:
         name: ${{ env.RELEASE_FOLDER_NAME }}.tar.gz
         path: ${{ env.RELEASE_FOLDER_NAME }}.tar.gz
         retention-days: 4
